/* Definition section */
%{
#include "common.h"
#include <stdbool.h>
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
extern void dumpSymbol(int scope);

char buf[CODE_BUF_SIZE];
char string_buf[CODE_BUF_SIZE];
int line_num = 0;
int dump_scope = 0;
int global_scope = 0;
int global_register_num = 0;
bool dump_that_shit = false;
bool has_syntax_error = false;
bool is_divide = false;

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, CODE_BUF_SIZE - strlen(buf) - 1); }

void printBuffer();
void printErrorMsg();
void raiseSyntaxError();

%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return ADD; }
"-" 	{ CONCAT; return SUB; }
"*" 	{ CONCAT; return MUL; }
"/" 	{ CONCAT; is_divide = true; return DIV; }
"%"     { CONCAT; return MOD; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return ASGN; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; is_divide = true; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return LB; }
")"		{ CONCAT; return RB; }
"{"		{ 
            CONCAT;
            global_scope++; 
            return LCB; 
        }
"}"		{ 
            CONCAT;
            dump_scope = global_scope;
            global_scope--; 
            dump_that_shit = true; 
            return RCB; 
        }
"["		{ CONCAT; return LSB; }
"]"		{ CONCAT; return RSB; }
","		{ CONCAT; return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; yylval.yytype.id = strdup(yytext); return VOID; }
"int"		{ CONCAT; yylval.yytype.id = strdup(yytext); return INT; }
"float"  	{ CONCAT; yylval.yytype.id = strdup(yytext); return FLOAT; }
"string"  	{ CONCAT; yylval.yytype.id = strdup(yytext); return STRING; }
"bool"  	{ CONCAT; yylval.yytype.id = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

 /* return Keywords */
"return"    { CONCAT; return RETURN; }
"continue"  { CONCAT; return CONT; }
"break"     { CONCAT; return BREAK; }

 /* String Constant */
\"				        { CONCAT; BEGIN STRING_STATE; memset(string_buf, 0, CODE_BUF_SIZE); }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT; strncat(string_buf, yytext, CODE_BUF_SIZE-strlen(string_buf)-1); yylval.yytype.id = strdup(string_buf); return STR_CONST; }

 /* Number Constant */
{integer}   { CONCAT; yylval.yytype.i_val = atoi(yytext); return I_CONST; }
{float}     { CONCAT; yylval.yytype.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ CONCAT; printBuffer(); }
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ CONCAT; BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
{id}    { CONCAT; yylval.yytype.id = strdup(yytext); return ID; }

 /* others */
";"         { CONCAT; return SEMICOLON; }
[\n]        { CONCAT; printBuffer(); /*return NEWLINE;*/ }
[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */
<<EOF>>     { return EOF; }

%%

int yywrap() {
    return 1;
}

void printBuffer() {
    // print current line
    if (buf[0] != '\n')
        printf("%d: %s", yylineno, buf);
    else
        printf("%d:%s", yylineno, buf);
    
    // print error message if there's any
    printErrorMsg();

    if (has_syntax_error) {
        raiseSyntaxError();
    }

    bzero(buf, strlen(buf));
    
    // dump symbol if there's any
    if (dump_that_shit) {
        dump_that_shit = false;
        dumpSymbol(dump_scope);
    }
}

void raiseSyntaxError() {
    printf("\n|-----------------------------------------------|\n");
    printf("| Error found in line %d: %s", yylineno, buf);
    printf("| %s", "syntax error");
    printf("\n|-----------------------------------------------|\n\n");
    exit(1);
}